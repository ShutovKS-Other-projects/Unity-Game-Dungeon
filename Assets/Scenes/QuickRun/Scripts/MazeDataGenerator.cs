//Логика генерации данных, в этом нам поможет MazeConstructor
using System.Collections.Generic;
using UnityEngine;

public class MazeDataGenerator
{
    public float placementThreshold; // вероятность наличия пустого места

    /* placementThreshold будет использоваться алгоритмом генерации данных, чтобы определить, является ли пространство пустым. 
     * Этой переменной присваивается значение по умолчанию в конструкторе класса, но она становится общедоступной, 
     * чтобы другой код мог настраивать генерированный лабиринт.*/
    public MazeDataGenerator()
    {
        placementThreshold = .1f;       
    }

    public int[,] FromDimensions(int sizeRows, int sizeCols)
    {
        int[,] maze = new int[sizeRows, sizeCols];

        int rMax = maze.GetUpperBound(0);
        int cMax = maze.GetUpperBound(1);

        for (int i = 0; i <= rMax; i++)
        {
            for (int j = 0; j <= cMax; j++)
            {
                /* Для определенной ячейки меша, код сперва проверит, находится ли текущая ячейка снаружи меша 
                 * (то есть, существует ли какой-либо индекс внутри границ конкретного массива). 
                 * Если это так, назначьте 1 для этой стены.*/
                if (i == 0 || j == 0 || i == rMax || j == cMax)
                {
                    maze[i, j] = 1;
                }

                /* Затем код должен проверить, делятся ли координаты равномерно на 2, для дальнейшей работы с любой другой ячейкой. Существует дополнительная 
                 * проверка по значению placeThreshold, описанному ранее, чтобы случайно не пропустить эту ячейку и продолжить итерацию по массиву.*/
                else if (i % 2 == 0 && j % 2 == 0)
                {
                    if (Random.value > placementThreshold)
                    {
                        /* Также, код вбивает значение 1 как текущей ячейке, так и рандомной соседней ячейке. Код использует серию троичных операторов 
                         * для случайного добавления 0, 1 или -1 к индексу массива, таким образом он получит индекс напрямую от соседней ячейки.*/
                        maze[i, j] = 1;

                        int a = Random.value < .5 ? 0 : (Random.value < .5 ? -1 : 1);
                        int b = a != 0 ? 0 : (Random.value < .5 ? -1 : 1);
                        maze[i + a, j + b] = 1;
                    }
                }
            }
        }

        return maze;
    }
}
